{"version":3,"sources":["logo.svg","data.csv","App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","ogData","setogData","useEffect","d3","csvData","then","d","onFiltered","value","accessor","filtered","filter1","length","forEach","record","i","deliveryPincode","includes","push","sort","a","b","Date","orderDate","split","reverse","console","log","className","type","onChange","event","target","map","item","item1","items","filter","element","orderId","customerId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src","document","getElementById"],"mappings":"gOAAe,I,aCAA,MAA0B,iC,OCuG1BA,MAhGf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACAC,qBAAU,WAKR,OAJAC,IAAOC,GAASC,MAAK,SAACC,GACpBP,EAAQO,GACRL,EAAUK,MAEL,eACN,IAIH,IAAMC,EAAa,SAACC,EAAOC,GACzB,IAAIC,EAAWZ,EACXa,EAAU,GACVD,EAASE,QACXF,EAASG,SAAQ,SAACC,EAAQC,GACV,KAAVP,GAAgBA,EAAMI,OACX,oBAAbH,EACIK,EAAOE,gBAAgBC,SAAST,IAAUG,EAAQO,KAAKJ,IAAWH,EAAQQ,MAC1E,SAACC,EAAGC,GAAJ,OACE,YAAIC,KAAJ,YAAYF,EAAEG,UAAUC,MAAM,KAAKC,YAAnC,YACIH,KADJ,YACYD,EAAEE,UAAUC,MAAM,KAAKC,eAErCX,EAAOS,UAAUN,SAAST,IAAUG,EAAQO,KAAKJ,IAAWH,EAAQQ,MACpE,SAACC,EAAGC,GAAJ,OAAWD,EAAEJ,gBAAkBK,EAAEL,gBAAmB,GAAK,KAExDL,EAAUX,KAGrB0B,QAAQC,IAAIhB,GACZZ,EAAQY,IAGV,OACE,sBAAKiB,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,SAAf,UACE,8CACA,uBACEC,KAAK,OACLC,SAAU,SAACC,GAAD,OACRxB,EAAWwB,EAAMC,OAAOxB,MAAO,yBAIrC,sBAAKoB,UAAU,SAAf,UACE,0CACA,uBACEC,KAAK,OACLC,SAAU,SAACC,GAAD,OACRxB,EAAWwB,EAAMC,OAAOxB,MAAO,sBAKvC,kCACE,+BACE,0CACA,yCACA,0CACA,4CACA,0CAEF,gCACGV,EAAKmC,KAAI,SAACC,GAET,IAAMC,EAAQD,EAAKE,MAChBZ,MAAM,KACNa,QAAO,SAACC,GAAD,MAAyB,KAAZA,KAEvB,OACE,+BACE,6BAAKJ,EAAKK,UACV,6BAAKL,EAAKM,aACV,6BAAKN,EAAKlB,kBACV,6BAAKkB,EAAKX,YACV,6BACGY,EAAMF,KAAI,SAACK,GACV,OACE,6BACE,6BAAKA,0BC7EdG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,wBAAQC,IAAI,8CACZ,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fefdda6a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/data.0d9daa6c.csv\";","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport ReactDOM from \"react-dom\";\nimport React, { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport csvData from \"./data.csv\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [ogData, setogData] = useState([]);\n  useEffect(() => {\n    d3.csv(csvData).then((d) => {\n      setData(d);\n      setogData(d);\n    });\n    return () => undefined;\n  }, []);\n\n  // console.log(ogData);\n\n  const onFiltered = (value, accessor) => {\n    let filtered = data;\n    let filter1 = [];\n    if (filtered.length) {\n      filtered.forEach((record, i) => {\n        if (value !== \"\" || value.length) {\n          accessor === \"deliveryPincode\"\n            ? record.deliveryPincode.includes(value) && filter1.push(record) && filter1.sort(\n              (a, b) =>\n                new Date(...a.orderDate.split(\"/\").reverse()) -\n                new Date(...b.orderDate.split(\"/\").reverse())\n            )\n            : record.orderDate.includes(value) && filter1.push(record) && filter1.sort(\n              (a, b) => (a.deliveryPincode > b.deliveryPincode) ? 1 : -1\n            )\n        } else filter1 = ogData;\n      });\n    }\n    console.log(filter1);\n    setData(filter1);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"fields\">\n        <div className=\"field1\">\n          <span>Pin Code :</span>\n          <input\n            type=\"text\"\n            onChange={(event) =>\n              onFiltered(event.target.value, \"deliveryPincode\" )\n            }\n          />\n        </div>\n        <div className=\"field2\">\n          <span>Date :</span>\n          <input\n            type=\"text\"\n            onChange={(event) =>\n              onFiltered(event.target.value, \"orderDate\")\n            }\n          />\n        </div>\n      </div>\n      <table>\n        <tr>\n          <th>Order Id</th>\n          <th>Cust Id</th>\n          <th>Pin Code</th>\n          <th>Order Date</th>\n          <th>Items</th>\n        </tr>\n        <tbody>\n          {data.map((item) => {\n            // console.log(item);\n            const item1 = item.items\n              .split(\";\")\n              .filter((element) => element !== \"\");\n            // console.log(item1);\n            return (\n              <tr>\n                <td>{item.orderId}</td>\n                <td>{item.customerId}</td>\n                <td>{item.deliveryPincode}</td>\n                <td>{item.orderDate}</td>\n                <td>\n                  {item1.map((element) => {\n                    return (\n                      <ul>\n                        <li>{element}</li>\n                      </ul>\n                    );\n                  })}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <script src=\"https://unpkg.com/d3@5.9.2/dist/d3.min.js\"></script>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}